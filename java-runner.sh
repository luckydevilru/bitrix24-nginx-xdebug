#!/bin/bash

# –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
set -e

echo "üöÄ Starting Java Applications Manager..."
echo "üìÅ Apps directory: /apps"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
chmod +x /usr/local/bin/java-runner.sh

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Java
java -version

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    echo "üì¶ Installing dependencies..."
    apt-get update -qq > /dev/null 2>&1
    apt-get install -y curl python3 > /dev/null 2>&1
    echo "‚úÖ Dependencies installed"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
start_app() {
    local app_dir="$1"
    local app_name=$(basename "$app_dir")
    local port=${2:-8080}

    echo "üéØ Processing application: $app_name"

    # –ò—â–µ–º JAR —Ñ–∞–π–ª
    local jar_file=""
    if [ -f "$app_dir/target/"*.jar ]; then
        jar_file=$(find "$app_dir/target/" -name "*.jar" | head -n 1)
    elif [ -f "$app_dir/build/libs/"*.jar ]; then
        jar_file=$(find "$app_dir/build/libs/" -name "*.jar" | head -n 1)
    elif [ -f "$app_dir/"*.jar ]; then
        jar_file=$(find "$app_dir/" -maxdepth 1 -name "*.jar" | head -n 1)
    fi

    if [ -z "$jar_file" ]; then
        echo "‚ö†Ô∏è  No JAR file found in $app_dir"
        echo "   Checked: target/, build/libs/, and root directory"
        return 1
    fi

    echo "üì¶ Found JAR: $jar_file"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    cd "$app_dir"
    nohup java $JAVA_OPTS \
        -Dserver.port=$port \
        -Dspring.application.name="$app_name" \
        -Dspring.datasource.url="jdbc:mariadb://${DB_HOST}:${DB_PORT}/${app_name}_db" \
        -Dspring.datasource.username="$DB_USER" \
        -Dspring.datasource.password="$DB_PASSWORD" \
        -Dspring.datasource.driver-class-name="org.mariadb.jdbc.Driver" \
        -Dspring.jpa.hibernate.ddl-auto="update" \
        -Dspring.jpa.show-sql="false" \
        -Dlogging.level.org.springframework.web="INFO" \
        -jar "$jar_file" > "/var/log/${app_name}.log" 2>&1 &

    local pid=$!
    echo "$pid" > "/tmp/${app_name}.pid"
    echo "‚úÖ $app_name started with PID: $pid on port $port"

    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    echo "‚è≥ Waiting for $app_name to start..."
    sleep 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
    if kill -0 "$pid" 2>/dev/null; then
        echo "üéâ $app_name is running successfully!"
    else
        echo "‚ùå $app_name failed to start. Check logs: /var/log/${app_name}.log"
        return 1
    fi
}

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Ä–æ—É—Ç–µ—Ä
start_router() {
    echo "üåê Starting HTTP router on port 8080..."

    cat > /tmp/app_router.py << 'PYEOF'
#!/usr/bin/env python3
import http.server
import socketserver
import os
import subprocess
import time
from urllib.parse import urlparse
import threading

class JavaAppRouter(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        self.handle_request()

    def do_POST(self):
        self.handle_request()

    def handle_request(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-App-Name
            app_name = self.headers.get('X-App-Name', '').strip()

            if not app_name:
                self.send_response(400)
                self.end_headers()
                self.wfile.write(b'Missing X-App-Name header')
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app_dir = f"/apps/{app_name}"
            if not os.path.exists(app_dir):
                self.send_response(404)
                self.end_headers()
                self.wfile.write(f"Application {app_name} not found".encode())
                return

            # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ)
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()

            response = f"""
            <html>
            <head><title>Java App: {app_name}</title></head>
            <body>
                <h1>Application: {app_name}</h1>
                <p>Status: Running</p>
                <p>Directory: {app_dir}</p>
                <p>Time: {time.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </body>
            </html>
            """
            self.wfile.write(response.encode())

        except Exception as e:
            self.send_response(500)
            self.end_headers()
            self.wfile.write(f"Error: {str(e)}".encode())
            print(f"Router error: {e}")

if __name__ == "__main__":
    PORT = 8080
    with socketserver.TCPServer(("", PORT), JavaAppRouter) as httpd:
        print(f"Router serving on port {PORT}")
        httpd.serve_forever()
PYEOF

    python3 /tmp/app_router.py &
    echo "‚úÖ Router started"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    install_dependencies

    echo "üîç Scanning for Java applications..."

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_count=0
    for app_dir in /apps/*/; do
        if [ -d "$app_dir" ]; then
            ((app_count++))
        fi
    done

    if [ $app_count -eq 0 ]; then
        echo "‚ö†Ô∏è  No applications found in /apps/"
        echo "üìÅ Expected structure: /apps/app-name/target/app.jar"
        echo "üîÑ Starting router only..."
        start_router
        wait
        return 0
    fi

    echo "üìä Found $app_count applications"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    current_port=8080
    for app_dir in /apps/*/; do
        if [ -d "$app_dir" ]; then
            start_app "$app_dir" $current_port &
            sleep 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            ((current_port++))
        fi
    done

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    start_router

    echo "üéâ All applications processed!"
    echo "üìã Monitoring applications..."

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    while true; do
        sleep 30
        echo "üíì Heartbeat - $(date)"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid_file in /tmp/*.pid; do
            if [ -f "$pid_file" ]; then
                pid=$(cat "$pid_file" 2>/dev/null || echo "")
                app_name=$(basename "$pid_file" .pid)

                if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
                    echo "‚úÖ $app_name (PID: $pid) - OK"
                else
                    echo "üíÄ $app_name - DEAD, removing PID file"
                    rm -f "$pid_file"
                fi
            fi
        done
    done
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
cleanup() {
    echo "üõë Shutting down applications..."
    for pid_file in /tmp/*.pid; do
        if [ -f "$pid_file" ]; then
            pid=$(cat "$pid_file" 2>/dev/null || echo "")
            if [ -n "$pid" ]; then
                echo "Stopping PID: $pid"
                kill "$pid" 2>/dev/null || true
            fi
            rm -f "$pid_file"
        fi
    done
    exit 0
}

trap cleanup SIGTERM SIGINT

# –ó–∞–ø—É—Å–∫
main