user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    # универсалный
    server {
        listen 80;
        server_name ~^(?<subdomain>.+)\.loc;
        root /var/www/html/$subdomain;

        index index.html index.php;

        # Основная логика обработки
        location / {
            # 1. Ищем файл с точным именем $uri
            # 2. Если это директория, смотрим, есть ли index.php внутри
            # 3. Если ничего не нашли, уходим в @fallback → /index.php
            try_files $uri $uri/index.php @fallback;
        }

        # Попадаем сюда, если ничего не нашли:
        #  - Директория существует, но без index.php
        #  - Или путь вообще не существует
        location @fallback {
            rewrite ^ /index.php last;
        }

        # Обработка PHP
        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass php:9000; # Или unix:/var/run/php/php7.4-fpm.sock, в зависимости от настройки PHP-FPM
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        # Логи
        error_log /var/log/nginx/$host-error.log;
        access_log /var/log/nginx/$host-access.log;

        # Защита скрытых файлов (.env и т.п.)
        location ~ /\. {
            deny all;
        }
    }


    # HTTP сервер (опционально перенаправляет на HTTPS)
    server {
        listen 80;
        server_name b24.doc;

        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name b24.doc;

        ssl_certificate /etc/nginx/ssl/b24.doc.pem;
        ssl_certificate_key /etc/nginx/ssl/b24.doc-key.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        root /var/www/html/bx24.loc;
        index index.php index.html index.htm;

        fastcgi_intercept_errors on;

        location / {
            try_files $uri $uri/ /bitrix/urlrewrite.php?$args;
        }

        # Restrict access to certain directories
        location ~ ^/(bitrix/modules|upload/support/not_image|\.svn|\.git|\.ht) {
            deny all;
            return 404;
        }

        # Caching for static files
        location ~* \.(jpg|jpeg|gif|png|css|js|ico|swf|html)$ {
            access_log off;
            log_not_found off;
            expires max;
        }

        # PHP handling via FastCGI
        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass php:9000;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }


        # Custom error handling (optional)
        error_page 404 /404.php;
    }

    # локальные приложения битрикса
    server {
        listen 80;
        server_name bxapps.doc;

        return 301 https://$host$request_uri;
    }

    # адапитируйте под свой проект зддесь я под совю компанию сделал
    server {
        listen 443 ssl;
        server_name bxapps.doc;

        ssl_certificate /etc/nginx/ssl/bxapps.doc.pem;
        ssl_certificate_key /etc/nginx/ssl/bxapps.doc-key.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        set $www_root "/var/www/html/bxapps";
        root $www_root;
        index index.php index.html index.htm;

        fastcgi_intercept_errors off;

        location ~* /apps/(common|v2|dev|test|preprod)/.*\.(html|json|js|css|ttf|eot|otf|woff2|svg|csv|jpg|jpeg|gif)$ {
            try_files $uri =404;
            access_log off;
            expires max;
        }

        location ~ \.php$ {
            fastcgi_param HTTP_COOKIE $http_cookie;
            include fastcgi_params;
            fastcgi_intercept_errors off;
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $www_root/$fastcgi_script_name;
            fastcgi_param PHP_ADMIN_VALUE "sendmail_path = /usr/sbin/sendmail -t -i -f noreply@ffin.ru";
            include fastcgi_params;
        }

        location ~ /(common|credits|cards|dev|test|preprod)/([^/]*)/(.*) {
            alias /var/www/html/bxapps/apps;
            fastcgi_intercept_errors off;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root/$1/$2/public/index.php;
            fastcgi_param REQUEST_URI /$3;
            fastcgi_pass php:9000;
            fastcgi_index index.php;
        }

        location ~ /v2/([^/]*)/(.*) {
            alias /var/www/html/bxapps;
            fastcgi_intercept_errors off;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root/apps/v2/$1/public/index.php;
            fastcgi_param REQUEST_URI /apps/v2/$1/$2;
            fastcgi_pass php:9000;
            fastcgi_index index.php;
        }
    }

    #java приложения
    # Добавить в секцию http{} вашего nginx.conf

        # Upstream для Java приложений (динамический)
        map $host $java_port {
            default 8080;
            ~^(?<app_name>[^.]+)\.java\.loc$ 8080;
        }

        # Мап для определения директории приложения
        map $host $app_directory {
            ~^(?<app_name>[^.]+)\.java\.loc$ $app_name;
            default "";
        }

        # Java приложения - универсальный сервер для всех поддоменов
        server {
            listen 80;
            server_name ~^(?<app_name>[^.]+)\.java\.loc$;

            # Логирование
            access_log /var/log/nginx/java-$app_name-access.log;
            error_log /var/log/nginx/java-$app_name-error.log;

            # Проксирование на Java backend
            location / {
                # Проверяем, что приложение существует
                set $java_backend "";
                set $java_backend "java:8080";

                proxy_pass http://$java_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-App-Name $app_name;

                # Для Spring Boot Actuator
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;

                # WebSocket поддержка
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";

                # Таймауты для Spring Boot
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;

                # Буферизация для лучшей производительности
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
            }

            # API маршруты
            location /api/ {
                proxy_pass http://java:8080;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-App-Name $app_name;
                proxy_set_header Content-Type application/json;

                # CORS для API (если нужно)
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            }

            # Статические ресурсы Spring Boot
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
                proxy_pass http://java:8080;
                proxy_set_header Host $host;
                proxy_set_header X-App-Name $app_name;

                # Кэширование статики
                expires 1h;
                add_header Cache-Control "public, immutable";

                # Gzip сжатие
                gzip_static on;
            }

            # Spring Boot Actuator endpoints (если используется)
            location /actuator/ {
                proxy_pass http://java:8080;
                proxy_set_header Host $host;
                proxy_set_header X-App-Name $app_name;

                # Ограничить доступ к Actuator (опционально)
                # allow 127.0.0.1;
                # deny all;
            }

            # WebJars (если используются)
            location /webjars/ {
                proxy_pass http://java:8080;
                proxy_set_header Host $host;
                proxy_set_header X-App-Name $app_name;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }

        # HTTPS версия для Java приложений (опционально)
        server {
            listen 443 ssl;
            server_name ~^(?<app_name>[^.]+)\.java\.loc$;

            # SSL сертификат (можно использовать wildcard)
            ssl_certificate /etc/nginx/ssl/java.loc.pem;
            ssl_certificate_key /etc/nginx/ssl/java.loc-key.pem;

            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers HIGH:!aNULL:!MD5;
            ssl_prefer_server_ciphers on;

            access_log /var/log/nginx/java-$app_name-ssl-access.log;
            error_log /var/log/nginx/java-$app_name-ssl-error.log;

            location / {
                proxy_pass http://java:8080;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header X-App-Name $app_name;

                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }
        }

}
